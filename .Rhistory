install.packages(sas7bdat)
install.packages("sas7bdat"")
a<-1:10
b<-11:30
c<-a[b>15]
a
b
c
c<-a[a>5]
c
q()
c<-pbeta(0.72,1,1)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("caret")
library(caret)
install.packages("lattice")
install.packages("lattice")
install.packages("ggplot2")
library("lattice")
library(lattice)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(gbm)
install.packages("gbm")
library(gbm)
install.packages("survival")
install.packages("survival")
library(survival)
intall.packages("lattice")
install.packages("lattice")
library(lattice)
install.packages("splines")
install.packages("splines")
install.packages("splines")
library(splines)
install.packages("parallel")
library(parallel)
library(gbm)
library(survival)
library(lattice)
library(gbm)
library(ggplot2)
library(caret)
library(randomForest)
setwd("C:/Users/Lily/course8/project")
trainingdata <- read.csv("./pml-training.csv")
testdata <- read.csv("./pml-testing.csv")
# remove near zero covariates
nearzero <- nearZeroVar(trainingdata, saveMetrics = T)
trainingdata <- trainingdata[, !nearzero$nzv]
# remove variables with more than 80% missing
egvar <- sapply(colnames(trainingdata), function(x) if(sum(is.na(trainingdata[, x])) > 0.8*nrow(trainingdata)){return(T)}else{return(F)})
trainingdata <- trainingdata[, !egvar]
cor <- abs(sapply(colnames(trainingdata[, -ncol(trainingdata)]), function(x) cor(as.numeric(trainingdata[, x]), as.numeric(trainingdata$classe), method = "spearman")))
summary(cor)
plot(trainingdata[, names(which.max(cor))], trainingdata[, names(which.max(cor[-which.max(cor)]))], col = trainingdata$classe, pch = 15, cex = 0.2, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
set.seed(200)
boostFit <- train(classe ~ ., method = "gbm", data = trainingdata, verbose = F, trControl = trainControl(method = "cv", number = 10))
boostFit <- train(classe ~ ., method = "gbm", data = trainingdata, verbose = F, trControl = trainControl(method = "cv", number = 10))
rfFit <- train(classe ~ ., method = "rf", data = trainingdata, importance = T, trControl = trainControl(method = "cv", number = 10))
install.packages("e1071")
library(e1071)
model <- randomForest(classe ~ ., data = trainingdata)
predictCrossVal <- predict(model, testdata)
trainingdata <- trainingdata[8:length(trainingdata)]
inTrain <- createDataPartition(y = trainingdata$classe, p = 0.7, list = FALSE)
training <- trainingdata[inTrain, ]
crossval <- trainingdata[-inTrain, ]
correlMatrix <- cor(training[, -length(training)])
corrplot(correlMatrix, order = "FPC", method = "circle", type = "lower", tl.cex = 0.8,  tl.col = rgb(0, 0, 0))
install.packages("corrplot")
library(corrplot)
corrplot(correlMatrix, order = "FPC", method = "circle", type = "lower", tl.cex = 0.8,  tl.col = rgb(0, 0, 0))
cor <- abs(sapply(colnames(trainingdata[, -ncol(trainingdata)]), function(x) cor(as.numeric(trainingdata[, x]), as.numeric(trainingdata$classe), method = "spearman")))
summary(cor)
model <- randomForest(classe ~ ., data = trainingdata)
model <- randomForest(classe ~ ., data = training)
predictCrossVal <- predict(model, crossval)
confusionMatrix(crossval$classe, predictCrossVal)
install.packages("e1071")
